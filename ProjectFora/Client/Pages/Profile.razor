@inject ILocalStorageService LocalStorage
@inject IInterestManager InterestManager
@inject IUserManager UserManager
@page "/profile"

<h3>Profile</h3>

@if (userStatus != null && userStatus.IsLoggedIn)
{
    <h1>You only see this because you are logged in</h1>
   

    @if (userStatus.IsAdmin)
    {
        <h1>You only see this because you are an admin</h1>
    }
}
else
{
    <h1>Unauthorized</h1>
      @*<button @onclick=DeActivateUser>No</button>*@
}

@code {
    public List<UserInterestModel> UserInterests { get; set; } = new();

    // Auth pipeline:
    // 1. Hämta token från Local Storage
    // 2. Skicka den token:en till API:t
    // 3. API:t kollar i databasen och jämför
    // 4. Stämmer? Skicka tillbaka en bool "isLoggedIn"

    private UserStatusDto? userStatus;
    public UserModel User { get; set; } = new();
    public string userEmail { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var currentUser = UserManager.GetCurrentUser();

        UserInterests = await UserManager.GetUserInterests();

        // 1. Hämta token från Local Storage
        var token = await UserManager.GetToken();

        // 2. Skicka den token:en till API:t

        userStatus = await UserManager.CheckUserLogin(token);

        User = await UserManager.GetCurrentUser();

    }
    //    async Task DeActivateUser()
    //{
    //   Message = await UserManager.DeActivateUser(currentUser);
    //}
}
