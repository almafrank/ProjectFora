@inject ILocalStorageService LocalStorage
@inject IInterestManager InterestManager
@inject IUserManager UserManager
@inject IThreadsManager ThreadsManager
@inject NavigationManager NavigationManager
@inject IUserInterestManager UserInterestManager

@page "/profile"


@if (userStatus != null && userStatus.IsLoggedIn)
{
    <div class="card">
        <div class="card-header">Mina intressen:</div>

        @foreach (var interest in UserInterests)
        {
            <div class="card-body">

                <h5 class="card-title" onclick="@(() => NavigateToThreads(@interest.Id))">@interest.Name</h5>

                <button class="btn btn-danger btn-sm" onclick="@(() => DeleteUserInterest(@interest.Id))">Ta bort</button>
            </div>
        }
    </div>

    <div class="card">
        <div class="card-header">Alla intressen:</div>
        @foreach (var interest in Interests)
        {
            <div class="card-body">
                <h5 class="card-title">@interest.Name</h5>

                <button class="btn btn-success btn-sm" onclick=@(() => AddInterest(interest) )>Lägg till</button>
                @if (@interest.UserId != null || @interest.UserId == currentUser.Id)
                {
                    <button class="btn btn-danger btn-sm" onclick=@(() => DeleteInterest(interest.Id))>Ta bort</button>
                }
            </div>
        }
    </div>

    <div class="card">
        <div class="card-body">
            <h5 class="card-header">Mina trådar</h5>
            @foreach (var thread in threads)
            {
                <div class="card-body">
                @if (threads != null)
                {
                    @if (thread.UserId == currentUser.Id)
                    {
                        <h5 class="card-title" @onclick="@(()=>NavigateToAThread(@thread.Id))">@thread.Name</h5>
                    }
                }
                </div>
            }
        </div>
    </div>


    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Ändra lösenord</h5>
            <EditForm Model="changePassword" OnValidSubmit="ChangePassword">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="currentPassword">Nuvarande lösenord</label>
                    <InputText Id="email" class="form-control" @bind-Value="changePassword.CurrentPassword" />
                    <ValidationMessage For="@(() => changePassword.CurrentPassword)" />
                </div>
                <div class="form-group">
                    <label for="password">Nytt lösenord</label>
                    <InputText Id="password" type="password" class="form-control" @bind-Value="changePassword.NewPassword" />
                    <ValidationMessage For="@(() => changePassword.NewPassword)" />
                </div>
                <div>
                    <button type="submit" class="btn btn-success btn-sm">Spara</button>
                </div>
            </EditForm>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Skapa intresse</h5>
            <button @onclick="CreateInterest">Skapa</button>
            @if (createInterest)
            {
                <EditForm Model=interest OnSubmit="SaveCreatedInterest">
                    <label for="createInterest"></label>
                    <InputText id="createInterest" class="form-control" type="text" @bind-Value="interest.Name" placeholder="nytt intresse.." />
                    <button type="submit" class="btn btn-success btn-sm">Spara</button>
                </EditForm>
            }
        </div>
    </div>

    <div class="card">
        <div class="card-header">Kontoinställningar</div>
        <div class="card-body">
<button class="btn btn-warning btn-sm" @onclick="DeActivateUser">Inaktivera</button>
        @if (currentUser.Deleted)
        {
            <p>Ditt konto är inaktiverat</p>
        }
        <button class="btn btn-danger btn-sm" @onclick="DeleteAccount">Radera konto</button>
        </div>
    </div>
}
else
{
    <h1>Laddar</h1>
}

@code {
    public List<InterestModel> UserInterests { get; set; } = new List<InterestModel>();
    public List<InterestModel> Interests { get; set; } = new List<InterestModel>();
    private List<ThreadModel> threads = new();
    private UserModel currentUser = new();
    public EditPasswordModel changePassword = new();
    private UserStatusDto? userStatus;
    private InterestModel interest = new();
    private bool createInterest = false;

    private string token;

    protected override async Task OnInitializedAsync()
    {
        token = await UserManager.GetToken();

        userStatus = await UserManager.CheckUserLogin(token);
        UserInterests = await UserInterestManager.GetUserInterests(token);
        Interests = await InterestManager.GetAllInterest(token);
        currentUser = await UserManager.GetCurrentUser(token);
        threads = await ThreadsManager.GetAllThreads(token);
    }

    async Task AddInterest(InterestModel interest)
    {
        await UserInterestManager.AddUserInterest(interest, token);
        UserInterests = await UserInterestManager.GetUserInterests(token);
        StateHasChanged();
    }

    public async Task DeleteUserInterest(int Id)
    {
        await UserInterestManager.DeleteUserInterest(Id, token);
        UserInterests = await UserInterestManager.GetUserInterests(token);
        StateHasChanged();
    }

    public async Task DeleteInterest(int Id)
    {
        await InterestManager.DeleteInterest(Id, token);
        Interests = await InterestManager.GetAllInterest(token);
        await UserInterestManager.DeleteUserInterest(Id, token);
        UserInterests = await UserInterestManager.GetUserInterests(token);
        StateHasChanged();
    }

    public async Task CreateInterest()
    {
        createInterest = true;
    }

    public async Task SaveCreatedInterest()
    {
        await InterestManager.CreateInterest(interest, token);
        Interests = await InterestManager.GetAllInterest(token);
        StateHasChanged();
        interest = new();

    }

    async Task DeActivateUser()
    {
        await UserManager.ActivateAccount(token);
        currentUser = await UserManager.GetCurrentUser(token);
        StateHasChanged();
    }

    async Task DeleteAccount()
    {
        await UserManager.DeleteAccount(token);
        NavigationManager.NavigateTo("/login");
    }

    public void NavigateToThreads(int Id)
    {
        NavigationManager.NavigateTo($"threads/{Id}");
    }

    public async Task NavigateToAThread(int Id)
    {
        NavigationManager.NavigateTo($"thread/{Id}");
    }

    void ChangePassword()
    {
        UserManager.ChangePassword(changePassword, token);
    }

}
