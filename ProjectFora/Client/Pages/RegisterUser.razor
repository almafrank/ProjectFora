@page "/registerUser"
@inject NavigationManager NavigationManager
@inject IInterestManager Intererestmanager
@inject IUserManager UserManager

<h3>Register</h3>

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="registerUser" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" class="form-control" @bind-Value="registerUser.Email" />
                <ValidationMessage For="@(() => registerUser.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="registerUser.Password" />
                <ValidationMessage For="@(() => registerUser.Password)" />
            </div>
            <div class="form-group">
                <label for="password">Confirm Password</label>
                <InputText Id="confirmPassword" type="password" class="form-control" @bind-Value="registerUser.ConfirmPassword" />
                <ValidationMessage For="@(() => registerUser.ConfirmPassword)" />
            </div>
            <div>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>

    <h1>Interests</h1>
    @foreach (var interest in Interests)
    {
        <input type="checkbox" /> @interest.Name
    }

</div>

@code {
    public UserModel AddUser { get; set; } = new();
    public List<InterestModel> Interests { get; set; } = new();
    public List<InterestModel> UserInterests { get; set; } = new();
    private RegisterModel registerUser = new RegisterModel();

    protected override async Task OnInitializedAsync()
    {
        Interests = await Intererestmanager.GetAllInterest();
    }

    public async Task HandleRegistration()
    {
        // Skapar en användare till IdentityFlora databasen
        await UserManager.RegisterUser(registerUser);

        // Skapar en användare i FloraForum databasen.
        AddUser.Username = registerUser.Email;
        await Intererestmanager.SetUser(AddUser);

        var currentUser = await Intererestmanager.CurrentUser(registerUser.Email);
        

        //await UserManager.UpdateUserInterests(UserInterests, AddUser);

        //Int id
        //name
    }



}
