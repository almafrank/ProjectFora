@page "/thread/{Id:int}"
@inject IUserManager UserManager
@inject IMessageManager MessageManager
@inject IThreadsManager ThreadsManager
@inject ILocalStorageService LocalStorage

<div class="card">
    <div class="card-header">Skapa ett nytt meddelande</div>
    <div class="card-body">

        <EditForm Model=newMessage OnValidSubmit="CreateNewMessage">
            <div class="form-group">
                <label for="message">Message</label>
                <InputText class="form-control" id="message" @bind-Value="newMessage.Message" />
            </div>
            <button type="submit" class="btn btn-success btn-sm">Spara</button>
        </EditForm>
        <p>@message</p>
    </div>
</div>

<div class="card">
    @if (allMessages != null)
    {
        <div class="card-header">Meddelande:</div>
        @foreach (var message in allMessages)
        {
            <div class="card-body">
                @if (message.User.Banned || message.User.Deleted)
                {
                    <h2>&#128508;</h2>
                }

                @if (message.User.Id == currentUser.Id)
                {
                    <div class="card-text userMessage">


                        @if (message.HasDeleted)
                        {
                            <p class="editOrDeleted">@message.Message</p>
                        }
                        else
                        {
                            <p>@message.Message</p>
                        }
                        <p>Publicerad: @message.MessageCreated</p>
                        <p>Skapad av: @message.User.Username</p>

                        @if (message.IsEdited && !message.HasDeleted)
                        {
                            <p class="editOrDeleted">Meddelandet har ändrats</p>
                        }
                        @if (!message.HasDeleted)
                        {
                            <button class="btn btn-warning btn-sm" @onclick="EditMessage">Ändra</button>
                            <button class="btn btn-danger btn-sm" @onclick="(() =>DeleteMessage(message.Id))">Ta bort</button>
                        }
                    </div>
                    @if (editMessage == true && !message.HasDeleted)
                    {
                        <input type="text" @bind-value="editedMessage.Message" />
                        <button class="btn btn-success btn-sm" @onclick="(() => SaveEditMessage(message.Id))">Spara</button>
                    }
                }
                else
                {
                    @if (message.HasDeleted)
                    {
                        <p class="editOrDeleted">@message.Message</p>
                    }
                    else
                    {
                        <p>@message.Message</p>
                    }
                    <p>Publicerad: @message.MessageCreated</p>
                    <p>Skapad av: @message.User.Username</p>
                    @if (message.IsEdited)
                    {
                        <p class="editOrDeleted">@messageUpdated</p>
                    }
                }
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string token = "";
    private UserModel currentUser = new();
    private List<MessageModel> allMessages = new();
    private MessageDto newMessage = new();
    private MessageDto editedMessage = new();
    private bool editMessage = false;
    private string messageUpdated = "";
    private string message = "";


    protected override async Task OnParametersSetAsync()
    {
        // Get token
        token = await UserManager.GetToken();

        if (!String.IsNullOrEmpty(token))
        {
            // Get the thread with all messages
            allMessages = await MessageManager.GetThreadMessages(Id, token);
            allMessages.Sort((x, y) => -x.MessageCreated.CompareTo(y.MessageCreated));
            currentUser = await UserManager.GetCurrentUser(token);
        }
    }

    async Task CreateNewMessage()
    {
        if (newMessage.Message == "" || newMessage.Message == null)
        {
            message = "Meddelande måste innehålla text";
        }
        else
        {
            newMessage.ThreadId = Id;
            await MessageManager.CreateMessage(newMessage, token);
            await UpdateAllMessages();
        }

    }
    async Task EditMessage()
    {
        editMessage = true;
    }

    async Task SaveEditMessage(int id)
    {
        messageUpdated = await MessageManager.UpdateAThreadMessage(id, editedMessage, token);
        await UpdateAllMessages();
        editMessage = false;
    }
    async Task DeleteMessage(int id)
    {
        await MessageManager.DeleteMessage(id, token);
        await UpdateAllMessages();

    }
    async Task SaveDeleteMessage(int id)
    {
        messageUpdated = await MessageManager.UpdateAThreadMessage(id, editedMessage, token);
        await UpdateAllMessages();
        editMessage = false;
    }

    async Task UpdateAllMessages()
    {
        allMessages = await MessageManager.GetThreadMessages(Id, token);
        allMessages.Sort((x, y) => -x.MessageCreated.CompareTo(y.MessageCreated));
        StateHasChanged();
    }



    }
