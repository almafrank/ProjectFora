@page "/thread/{Id:int}"
@inject IUserManager UserManager
@inject IMessageManager MessageManager
@inject ILocalStorageService LocalStorage

<h3>Create a new message</h3>


<EditForm Model=newMessage OnValidSubmit="CreateNewMessage">
    <div class="form-group">
        <label for="message">Message</label>
        <InputText class="form-control" id="message" @bind-Value="newMessage.Message" />
    </div>
    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@if (allMessages != null)
{
    @foreach (var message in allMessages)
    {
    
            <div class="userMessage">
                <p>@message.Message</p>
                <p>@message.MessageCreated</p>
            </div>
  
    }
}
@code {
    [Parameter]
    public int Id { get; set; }
    private string token = "";
    private UserModel currentUser = new();
    private List<MessageModel> allMessages = new();
    private MessageDto newMessage = new();


    protected override async Task OnParametersSetAsync()
    {
        // Get token
        token = await UserManager.GetToken();

        if (!String.IsNullOrEmpty(token))
        {
            // Get the thread with all messages
            allMessages = await MessageManager.GetThreadMessages(Id, token);
            allMessages.Sort((x, y) => -x.MessageCreated.CompareTo(y.MessageCreated));
        }
        currentUser = await UserManager.GetCurrentUser(token);
    }

    async Task CreateNewMessage()
    {
        newMessage.ThreadId = Id;
        await MessageManager.CreateMessage(newMessage, token);
        allMessages = await MessageManager.GetThreadMessages(Id, token);
        allMessages.Sort((x, y) => -x.MessageCreated.CompareTo(y.MessageCreated));
        StateHasChanged();
    }



}
